preproc <- preProcess(training2[,-13],method="pca",thresh = 0.8)
trainPC <- predict(preproc,training2[,-13])
model_pca <- train(training2$diagnosis~., data = trainPC, method = "glm")
training2 <- select(training, starts_with("IL"), diagnosis)
testing2 <-  select(testing, starts_with("IL"), diagnosis)
model_non_pca <- train(diagnosis~., data = training2, method = "glm")
result_non_pca <- predict(model_non_pca, testing2)
confusionMatrix(result_non_pca, testing2$diagnosis)
preproc <- preProcess(training2[,-13],method="pca",thresh = 0.8)
preproc <- preProcess(training2[,-13],method="pca",thresh = 0.8)
trainPC <- predict(preproc,training2[,-13])
model_pca <- train(training2$diagnosis~., data = trainPC, method = "glm")
model_pca
test_pca <- predict(preproc, testing2[,-13])
testPC
testPC <- predict(preproc, testing2[,-13])
testPC
result_PCA <- predict(model_pca, testPC)
result_PCA
confusionMatrix(testing2$diagnosis,result_pca)
result_pca <- predict(model_pca, testPC)
confusionMatrix(testing2$diagnosis,result_pca)
library(caret)
library(AppliedPredictiveModeling)
library(dplyr)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training2 <- select(training, starts_with("IL"), diagnosis)
testing2 <-  select(testing, starts_with("IL"), diagnosis)
preproc <- preProcess(training2[,-13],method="pca",thresh = 0.9)
preproc
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticuzer)
training$Superplasticuzer
training
hist(training$Superplasticizer)
hist(log10(training$Superplasticizer+1))
hist(training$Superplasticizer)
hist(log10(training$Superplasticizer+1))
qplot(,training$CompressiveStrength, colour=training$Superplasticizer)
qplot(,training$CompressiveStrength, colour=training$Coarseggregate)
qplot(,training$CompressiveStrength, colour=training$FineAggregate)
qplot(,training$CompressiveStrength, colour=training$Age)
qplot(,training$CompressiveStrength, colour=training$Water)
qplot(,training$CompressiveStrength, colour=training$Cement)
qplot(,training$CompressiveStrength, colour=training$BlastFurnaceSlag)
qplot(,training$CompressiveStrength, colour=training$FlyAsh)
fit <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
fit <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
fit <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(fit)
fit <- lm(mpg ~ I(wt) + factor(cyl), data = mtcars)
summary(fit)
fit <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
summary(fit)
fit <- lm(mpg ~ factor(cyl) + I(wt), data = mtcars)
summary(fit)
head(mtcar)
head(mtcars)
unique(mtcars$cyl)
fit1 <- lm(mpg ~ factor(cyl), data = mtcars)
summary(fit1)
fit1 <- lm(mpg ~ factor(cyl), data = mtcars)
summary(fit1)
fit2 <- lm(mpg ~ factor(cyl) + I(wt), data = mtcars)
summary(fit2)
fit1 <- lm(mpg ~ factor(cyl), data = mtcars)
summary(fit1)
fit1 <- lm(mpg ~ I(factor(cyl)), data = mtcars)
summary(fit1)
fit1 <- lm(mpg ~ factor(cyl), data = mtcars)
summary(fit1)
fit <- lm(mpg ~ factor(cyl) + I(wt), data = mtcars)
summary(fit)
mtcars$cyl <- as.factor(mtcars$cyl)
fit <- lm(mpg ~ cyl + wt, data = mtcars)
summary(fit)
fit <- lm(mpg ~ , data = mtcars)
summary(fit)
fit <- lm(mpg ~ factor(cyl), data = mtcars)
summary(fit)
fit <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
summary(fit)
fit1 <- lm(mpg ~ factor(cyl), data = mtcars)
summary(fit1)
fit2 <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
summary(fit2)
fit1 <- lm(mpg ~ factor(cyl), data = mtcars)
summary(fit1)
fit2 <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
summary(fit2)
data(mtcars)
fit1 <- lm(mpg ~ factor(cyl), data = mtcars)
summary(fit1)
#
fit2 <- lm(mpg ~ factor(cyl)*wt, data = mtcars)
summary(fit2)
#
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
plot(x,y)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
plot(x,y)
fit <- lm(y~x)
hatvalues(fit)
fit <- lm(y~x)
plot(x,y)
abline(fit, lwd=3, col='red')
n <- 100; x <- c(10, rnorm(n)); y <- c(10, c(rnorm(n)))
plot(x, y, frame = FALSE, cex = 2, pch = 21, bg = "lightblue", col = "black")
abline(lm(y ~ x))
hatvalues(fit)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y~x)
plot(x,y)
abline(fit, lwd=3, col='red')
hatvalues(fit)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y~x)
plot(x,y)
abline(fit, lwd=3, col='red')
hatvalues(fit)
dfbetas(fit)
fit <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
abline(fit, lwd=3, col='red')
data(mtcars)
fit1 <- lm(mpg ~ factor(cyl), data = mtcars)
summary(fit1)
#
fit2 <- lm(mpg ~ factor(cyl)*wt, data = mtcars)
summary(fit2)
anova(fit1, fit2)
data(mtcars)
fit1 <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
summary(fit1)
#
fit2 <- lm(mpg ~ factor(cyl)*wt, data = mtcars)
summary(fit2)
anova(fit1, fit2)
x< -c(1,2,4)
x<-c(1,2,4)
data(mtcars)
summary(mtcars)
require(graphics)
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ disp | as.factor(cyl), data = mtcars,
panel = panel.smooth, rows = 1)
data(mtcars)
summary(mtcars)
head(mtcars)
fit <- lm(mpg~wt,mtcars)
plot(mtcars$wt,mtcars$mpg)
abline(fit, lwd=3, col='red')
data(mtcars)
summary(mtcars)
head(mtcars)
fit <- lm(mpg~wt,mtcars)
plot(mtcars$wt,mtcars$mpg)
abline(fit, lwd=3, col='red')
predict(fit,newdata = data.frame(wt = mean(mtcars$wt)), interval = "confidence")
summary(fit)
data(mtcars)
fit <- lm(mpg~wt,mtcars)
plot(mtcars$wt,mtcars$mpg)
abline(fit, lwd=3, col='red')
predict(fit,newdata = data.frame(wt = 3), interval = "prediction")
fit <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
summary(fit)
fit1 <- lm(mpg ~ factor(cyl), data = mtcars)
summary(fit1)
fit2 <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
summary(fit2)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y~x)
plot(x,y)
abline(fit, lwd=3, col='red')
hatvalues(fit)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y~x)
plot(x,y)
abline(fit, lwd=3, col='red')
hatvalues(fit)
dfbetas(fit)
data(mtcars)
fit1 <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
summary(fit1)
#
fit2 <- lm(mpg ~ factor(cyl)*wt, data = mtcars)
summary(fit2)
anova(fit1, fit2)
fit <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(fit)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
lm(mpg ~ wt + factor(cyl), data = mtcars)
summary(lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars))
summary(lm(mpg ~ wt + factor(cyl), data = mtcars))
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
summary(segmentationOriginal)
head(segmentationOriginal)
dim((segmentationOriginal)
dim((segmentationOriginal)
dim(segmentationOriginal)
names(segmentationOriginal)
data <- segmentationOriginal
head(data)
dim(training)
dim(testing)
data <- segmentationOriginal
summary(data)
head(data)
dim(data)
names(data)
dim(data)
testIndex <- createDataPartition(Case, p = 0.50,list=FALSE)
training <- data[-testIndex,]
testing <- data[testIndex,]
dim(training)
dim(testing)
head(data)
dim(data)
names(data)
dim(data)
testIndex <- createDataPartition(Case, p = 0.50,list=FALSE)
training <- data[-testIndex,]
testing <- data[testIndex,]
dim(training)
dim(testing)
testIndex <- createDataPartition(Case, p = 0.50,list=FALSE)
data <- segmentationOriginal
data(segmentationOriginal)
testIndex <- createDataPartition(Case, p = 0.50,list=FALSE)
testIndex <- createDataPartition(data$Case, p = 0.50,list=FALSE)
training <- data[-testIndex,]
testing <- data[testIndex,]
dim(training)
dim(testing)
dim(data)
dim(training)
dim(testing)
set.seed(125)
install.packages("rpart")
install.packages("rpart")
library(rpart)
set.seed(125)
tree <- train(Case ~ ., data = training, method = "rpart")
library(AppliedPredictiveModeling)
library(caret)
library(rpart)
testIndex <- createDataPartition(data$Case, p = 0.50,list=FALSE)
training <- data[-testIndex,]
testing <- data[testIndex,]
set.seed(125)
tree <- train(Case ~ ., data = training, method = "rpart")
TotalIntench2 <- c(23000,50000,57000)
FiberWidthCh1 <- c(10,10,8)
PerimStatusCh1 <- c(2,100,100,2)
TotalIntench2 <- c(23000,50000,57000)
FiberWidthCh1 <- c(10,10,8,100)
PerimStatusCh1 <- c(2,100,100,2)
TotalIntench2 <- c(23000,50000,57000,NA)
FiberWidthCh1 <- c(10,10,8,8)
PerimStatusCh1 <- c(2,NA,NA,2)
VarIntenCh4 <- c(NA,100,100,100)
TotalIntench2 <- c(23000,50000,57000,NA)
FiberWidthCh1 <- c(10,10,8,8)
PerimStatusCh1 <- c(2,NA,NA,2)
VarIntenCh4 <- c(NA,100,100,100)
newData <- data.frame(TotalIntench2, FiberWidthCh1, PerimStatusCh1 )
newData
newData <- data.frame(TotalIntench2, FiberWidthCh1, PerimStatusCh1,VarIntenCh4 )
newData
testData <- data.frame(TotalIntench2, FiberWidthCh1, PerimStatusCh1,VarIntenCh4 )
predict(tree, newdata = testData)
tree <- train(Case ~ ., data = training, method = "rpart")
testData
testData[1,]
predict(tree, newdata = testData[1,])
predict(tree, newdata = testData[2,])
predict(tree, newdata = testData[3,])
predict(tree, newdata = testData[4,])
? predict
predict ?
TotalIntenCh2 <- c(23000,50000,57000,NA)
FiberWidthCh1 <- c(10,10,8,8)
PerimStatusCh1 <- c(2,NA,NA,2)
VarIntenCh4 <- c(NA,100,100,100)
testData <- data.frame(TotalInteCh2, FiberWidthCh1, PerimStatusCh1,VarIntenCh4 )
TotalIntenCh2 <- c(23000,50000,57000,NA)
FiberWidthCh1 <- c(10,10,8,8)
PerimStatusCh1 <- c(2,NA,NA,2)
VarIntenCh4 <- c(NA,100,100,100)
testData <- data.frame(TotalIntenCh2, FiberWidthCh1, PerimStatusCh1,VarIntenCh4 )
predict(tree, newdata = testData[4,])
predict(tree, newdata = testData)
TotalIntenCh2 <- c(23000,50000,57000,NA)
FiberWidthCh1 <- c(10,10,8,8)
PerimStatusCh1 <- c(2,NA,NA,2)
VarIntenCh4 <- c(NA,100,100,100)
testData <- data.frame(TotalIntenCh2, FiberWidthCh1, PerimStatusCh1,VarIntenCh4 )
predict(tree, newdata = testData)
tree
predict.rpart(tree, newdata = testData)
rpart::predict.rpart(tree, newdata = testData)
library(rpart)
rpart::predict.rpart(tree, newdata = testData)
rpart::predict.rpart(tree$finalModel, newdata = testData,type="class")
rpart:::predict.rpart(tree$finalModel, newdata = testData,type="class")
rpart:::predict.rpart(tree$finalModel, newdata = testData,type="class")
rpart:::predict.rpart(object=tree$finalModel, newdata = testData,type="class")
rpart:::predict.rpart(object=tree$finalModel, newdata = testData,type="class")
rpart:::predict.rpart(object=tree$finalModel, newdata = testData)
summary(tree$finalModel)
predict(object=tree$finalModel, newdata = testData)
predict(object=tree$finalModel, newdata = testData, type="class")
rpart:::predict.rpart(object=tree$finalModel, newdata = testData, type="class")
tree <- train(y = training$Case, x =  training[, -which(colnames(training) == "Case")] , data = training, method = "rpart")
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
str(olive)
newdata = as.data.frame(t(colMeans(olive)))
newdata
olive[,-1]
str(olive)
data(olive)
str(olive)
tree <- train(Area ~ ., data = olive, method = "rpart")
data(olive)
str(olive)
olive = olive[,-1]
tree <- train(Area ~ ., data = olive, method = "rpart")
testData = as.data.frame(t(colMeans(olive)))
predict(object=tree$finalModel, newdata = testData)
olive$Area
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(ElemStatLearn)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
str(trainSA)
glm.fit <- train(chd ~.,data = trainSA, method = "glm" )
glm.fit <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl,data = trainSA, family= bionomial )
glm.fit <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl,data = trainSA, family=bionomial() )
glm.fit <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl,data = trainSA, family=binomial() )
glm.fit <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl,data = trainSA, family=binomial() )
pred <- predict(glm.fit, type="response")
pred
str(SAheart)
str(trainSA)
pred <- predict(glm.fit, newdata= testSA  type="response")
pred <- predict(glm.fit, newdata= testSA, type="response")
trainSA[,10]
missClass(trainSA[,10],predict(glm.fit, newdata= trainSA, type="response"))
missClass <- function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA[,10],predict(glm.fit, newdata= trainSA, type="response"))
missClass(testSA[,10],predict(glm.fit, newdata= testSA, type="response"))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
str(vowel.train)
str(vowel.test)
vowel.train.y = factor(y)
vowel.train.y = factor(vowel.train.y)
vowel.train.y <- as.factor(vowel.train.y)
vowel.train$y <- as.factor(vowel.train$y)
str(vowel.train)
vowel.test$y <- as.factor(vowel.test$y)
str(vowel.test)
set.seed(33833)
rf <- train(y ~., data = vowel.train, method= "rf" )
varImp(rf)
set.seed(33833)
rf <- train(y ~., data = vowel.train, method= "rf" )
rf1 <- train(y ~., data = vowel.train, method= "rf" )
rf1 <- train(y ~., data = vowel.train, method= "rf" )
rf2 <- train(y ~., data = vowel.test, method= "rf" )
varImp(rf1)
varImp(rf2)
varImp(rf1, scale = FALSE)
varImp(rf1, scale = FALSE)
varImp(rf2, scale = FALSE)
set.seed(33833)
rf1 <- train(y ~., data = vowel.train, method= "rf" )
rf2 <- train(y ~., data = vowel.test, method= "rf" )
varImp(rf1, scale = FALSE)
str(data)
data <- segmentationOriginal
str(data)
tree <- train(Class ~ ., data = training, method = "rpart")
library(AppliedPredictiveModeling)
library(caret)
library(rpart)
data(segmentationOriginal)
data <- segmentationOriginal
head(data)
dim(data)
names(data)
testIndex <- createDataPartition(data$Case, p = 0.50,list=FALSE)
training <- data[-testIndex,]
testing <- data[testIndex,]
dim(data)
dim(training)
dim(testing)
str(data)
set.seed(125)
tree <- train(Class ~ ., data = training, method = "rpart")
library(rattle)
install.packages("rattle")
library(rattle)
rattle::fancyRpartPlot(tree$finalModel)
install.packages("rpart.plot")
library(rattle)
rattle::fancyRpartPlot(tree$finalModel)
source('~/.active-rstudio-document')
plot([1,2,3])
plot([1,2,3],[1,2,3])
plot(C(1,2,3),C(1,2,3))
plot(x,y)
x = c(2,2,3)
plot(x,y)
y = c(2,2,3)
plot(x,y)
library(AppliedPredictiveModeling)
library(caret)
library(rpart)
data(segmentationOriginal)
data <- segmentationOriginal
head(data)
dim(data)
names(data)
testIndex <- createDataPartition(data$Case, p = 0.50,list=FALSE)
training <- data[-testIndex,]
testing <- data[testIndex,]
set.seed(125)
tree <- train(Class ~ ., data = training, method = "rpart")
library(rattle)
rattle::fancyRpartPlot(tree$finalModel)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
str(vowel.train)
str(vowel.test)
set.seed(33833)
rf1 <- train(y ~., data = vowel.train, method= "rf" )
#rf2 <- train(y ~., data = vowel.test, method= "rf" )
varImp(rf1, scale = FALSE)
anova(fit1, fit2)
data(mtcars)
# h_0
fit1 <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
summary(fit1)
# h_a
fit2 <- lm(mpg ~ factor(cyl)*wt, data = mtcars)
summary(fit2)
anova(fit1, fit2)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
setwd("C:/Shuvo/Documents/Google Drive/MyDrive/Scientific/Data Science/Code/Practical-Machine-Learning-Project")
setwd("C:/Shuvo/Documents/Google Drive/MyDrive/Scientific/Data Science/Code/Practical-Machine-Learning-Project")
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
answers <- rep("A", 20)
pml_write_files(answers)
